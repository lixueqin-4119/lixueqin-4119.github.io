<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>【算法与数据结构】 on 博客</title>
    <link>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 【算法与数据结构】 on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.wangchucheng.com/&#34;&gt;WANG Chucheng&lt;/a&gt; and &lt;a href=&#34;https://www.ruiqima.com/&#34;&gt;MA Ruiqi&lt;/a&gt;
</copyright>
    <lastBuildDate>Thu, 07 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序算法(上)</title>
      <link>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8A/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8A/</guid>
      <description>算法里面最简单的就是排序算法，这节课主要讲选择排序。
算法入门:四种排序算法(选择、归并、快速、技术)和对应的结构。
实现minOf2:2个数找出较小的那个 再优化
析构赋值:把结构拆开，依次复制 let minOf2=([a,b]) =&amp;gt; a &amp;lt; b ? a : b //调用 minOf2([1,2]) //小白调用法 minOf2.call(null,[1,2]) //高手调用法  现成API
JS内置了Math.min
Math.min(1,2)
Math.min.call(null,1,2)
Math.min.apply(null,[1,2])
关于Math
看起来Math像Object一样是构造函数
实际上Math只是普通对象，唯一一个首字母大写的对象，对象一般首字母小写
实现minOf3:3个数找出最小的那个 推广，任意长度数组求最小值 递归
特点
函数不停调用自己，每次调用的参数略有不同
当满足某个简单条件时，则实现一个简单的调用
最终算出结果
理解
可以用代入法快速理解递归
可以用调用栈快速理解递归 解析 代入法，先递进后回归 知识点
1.numbers.slice(1) 选中从下标1开始的所有数据
2.Math.min.apply(null,numbers) apply就是把numbers一个个展开调用。call就是把numbers作为一项。
var arr = [1,3,6,8,2,10]; var minNum = Math.min.apply(null,arr); console.log(minNum); //1  Math.min 可以实现得到数组中最小的一项
Math.min.apply(null,arr)其中第一个参数null，这个是因为没有对象去调用这个方法，所以直接传递null过去。同理,Math.max.apply可以获得数组里面最大的值。
实现sort排序(将正整数数组从小到大排序) 排序算法
思路: 1&amp;rsquo;用递归实现、2&amp;rsquo;用循环实现
递归思路 选择排序
例1.将长度为2的数组排序 例2.将长度为3的数组排序
思路:先求最小值，把最小值放前面。
然后将后面2个数字进行&amp;quot;2个数的排序&amp;quot;。 let minIndex = (numbers) =&amp;gt; numbers.</description>
    </item>
    
    <item>
      <title>排序算法(下)</title>
      <link>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8B/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8B/</guid>
      <description>所有算法都有2种写法递归和循环。
目前的minIndex,看着就繁琐。
let minIndex = (numbers) =&amp;gt; numbers.indexOf(min(numbers)) let min = (numbers) =&amp;gt; { return min( [numbers[0], min(numbers.slice(1))] ) }  minIndex重写
let minIndex = (numbers) =&amp;gt; let index=0 //默认下标为0开始 for(let i=1;i&amp;lt;numbers.length;i++){//默认从第2个开始比 if(numbers[i]&amp;lt;numbers[index]){ index=i } } return index }  默认返回下标为0(默认第1个数是最小的数)，然后用每个数跟它比。
哪个数字比它小就把下标置为那个小的数字。
所有递归都能改为循环
面试题
四种排序算法以及时间复杂度
改写sort:选择排序的循环写法 思路不变:
每次找到最小的数放前面，然后对后面的数做同样的的事情 ,然后i++。
let sort = (numbers) =&amp;gt; { if(numbers.length &amp;gt; 2){ let index = minIndex(numbers) let min = numbers[index] numbers.splice(index, 1) return [min].concat(sort(numbers)) }else{ return numbers[0]&amp;lt;numbers[1] ? numbers : numbers.</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lixueqin-4119.xyz/docs/example-doc/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>目前我们用过的数据结构
数组(选择排序、归并排序、快速排序)
数组可以分为队列、栈等
哈希表(计数排序)
用来存储key-value对
数据结构一:队列Queue 队列Queue:一种特殊的数组,先进先出的数组 什么是队列数据结构?
队列数据结构就是个类似数组的东西，但是它只提供push()入队和shift()出队2个操作。你提供这样的结构和这样的2个操作，你就是队列。 队列专门用来解决排队的问题。
用call改写
//queue.push(n) queue.push.call(queue, n) //const m = queue.shift() const m = queue.shift.call(queue)  数据结构二:栈Stack 后进先出的数组 例子:坐电梯超重时，后进先出。 2个操作:压栈push()、弹栈pop()
Queue和Stack都是用数组做的数据结构。
数据结构三:链表Linked List 一个链一个 JS的每个对象实际上就是链表。
这导致array能够直接访问数组原型的方法，比如说array.push()。 它也可以访问到对象原型上有的方法，比如说array.hasOwnProperty 这是一种非常简洁的实现继承的一种机制。
链表的好处:可以随时把中间的某个链条给断掉。
如何做到断掉数组原型？
将array.__proto__指向对象原型,它就不会再有push这个方法了。
对于修改东西比较方便。
创建链表 如何创建链表，在链表上增删改查?
1.创建只含有一个节点的link_list
const createList = (value) =&amp;gt; { //创建只含有一个节点的link_list return { data: value, next: null } } const list = createList(10) console.log(list) 运行:parcel src/linked_list.html  2.新增其它节点
const createList = (value) =&amp;gt; { return createNode(value) } const appendList = (list, value) =&amp;gt; { const node = createNode(value) list.</description>
    </item>
    
  </channel>
</rss>
